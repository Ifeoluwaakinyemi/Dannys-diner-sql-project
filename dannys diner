CREATE SCHEMA dannys_diner;
SET search_path = dannys_diner;

CREATE TABLE sales (
  customer_id VARCHAR(1),
  order_date DATE,
  product_id INTEGER
);

INSERT INTO sales
  (customer_id, order_date, product_id)
VALUES
  ('A', '2021-01-01', '1'),
  ('A', '2021-01-01', '2'),
  ('A', '2021-01-07', '2'),
  ('A', '2021-01-10', '3'),
  ('A', '2021-01-11', '3'),
  ('A', '2021-01-11', '3'),
  ('B', '2021-01-01', '2'),
  ('B', '2021-01-02', '2'),
  ('B', '2021-01-04', '1'),
  ('B', '2021-01-11', '1'),
  ('B', '2021-01-16', '3'),
  ('B', '2021-02-01', '3'),
  ('C', '2021-01-01', '3'),
  ('C', '2021-01-01', '3'),
  ('C', '2021-01-07', '3');
 

CREATE TABLE menu (
  product_id INTEGER,
  product_name VARCHAR(5),
  price INTEGER
);

INSERT INTO menu
  (product_id, product_name, price)
VALUES
  ('1', 'sushi', '10'),
  ('2', 'curry', '15'),
  ('3', 'ramen', '12');
  

CREATE TABLE members (
  customer_id VARCHAR(1),
  join_date DATE
);

INSERT INTO members
  (customer_id, join_date)
VALUES
  ('A', '2021-01-07'),
  ('B', '2021-01-09');
  
  
  
 1.  How many days has each customer visited the restaurant?
 SELECT COUNT(DISTINCT order_date), customer_id
 FROM sales 
 GROUP BY customer_id;
 
2. What was the first item from the menu purchased by each customer?
SELECT product_id, MIN(order_date), product_name
FROM sales s
JOIN menu m ON s.product_id = m.product_id 
GROUP BY product_id
ORDER BY MIN(ORDER_DATE);

3. What is the most purchased item on the menu and how many times was it purchased by all customers?
The first thing that came to my mind when seeing this query was to query them separately, but I realized that it wasnâ€™t as efficient, so I used joins instead

SELECT product_name, COUNT(*) AS total_purchases
FROM sales s
JOIN menu m ON s.product_id = m.product_id
GROUP BY product_name
ORDER BY total_purchases DESC
LIMIT 1;

4. Which item was the most popular for each customer?
SELECT t.customer_id, t.product_name, t.total_purchases
FROM (
  SELECT s.customer_id, m.product_name, COUNT(*) AS total_purchases,
         ROW_NUMBER() OVER (PARTITION BY s.customer_id ORDER BY COUNT(*) DESC) AS rn
  FROM sales s
  JOIN menu m ON s.product_id = m.product_id
  GROUP BY s.customer_id, m.product_name
) t
WHERE t.rn = 1
ORDER BY t.customer_id;

5. Which item was purchased first by the customer after they became a member?
SELECT m.customer_id, m.join_date, s.product_id, MIN(s.order_date) AS first_purchase_date
FROM members m
JOIN sales s ON m.customer_id = s.customer_id
WHERE s.order_date >= m.join_date
GROUP BY m.customer_id, m.join_date, s.product_id
HAVING MIN(s.order_date) = (
  SELECT MIN(order_date)
  FROM sales s2
  WHERE s2.customer_id = m.customer_id
    AND s2.order_date >= m.join_date
)
ORDER BY m.customer_id, m.join_date;


6. Which item was purchased just before the customer became a member?
SELECT m.customer_id, m.join_date, s.product_id, MAX(s.order_date) AS last_purchase_date
FROM members m
JOIN sales s ON m.customer_id = s.customer_id
WHERE s.order_date < m.join_date
GROUP BY m.customer_id, m.join_date, s.product_id
HAVING MAX(s.order_date) = (
  SELECT MAX(order_date)
  FROM sales s2
  WHERE s2.customer_id = m.customer_id
    AND s2.order_date < m.join_date
)
ORDER BY m.customer_id, m.join_date;


7.  If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?
SELECT s.customer_id, SUM(CASE WHEN m.product_name = 'Sushi' THEN 2 ELSE 1 END * m.price) * 10 AS points
FROM sales s
JOIN menu m ON s.product_id = m.product_id
GROUP BY s.customer_id;

8. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi
- how many points do customer A and B have at the end of January?
SELECT s.customer_id,
  SUM(CASE
        WHEN s.order_date <= DATE_ADD(mbr.join_date, INTERVAL 1 WEEK) THEN m.price * 20
        ELSE m.price * 10
      END) AS points
FROM sales s
JOIN menu m ON s.product_id = m.product_id
JOIN members mbr ON s.customer_id = mbr.customer_id
WHERE MONTH(s.order_date) = 1
GROUP BY s.customer_id;
